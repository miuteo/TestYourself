ID$CONTENT$EXPLANATION$CHAPTER_ID
101$What&nbsp;is&nbsp;the&nbsp;result&nbsp;of&nbsp;the&nbsp;following&nbsp;code?<br/>1:&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;class&nbsp;Employee&nbsp;{<br/>2:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;employeeId;<br/>3:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;firstName,&nbsp;lastName;<br/>4:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;yearStarted;<br/>5:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;public&nbsp;int&nbsp;hashCode()&nbsp;{<br/>6:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;employeeId;<br/>7:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>8:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;equals(Employee&nbsp;e)&nbsp;{<br/>9:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.employeeId&nbsp;==&nbsp;e.employeeId;<br/>10:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>11:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{<br/>12:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Employee&nbsp;one&nbsp;=&nbsp;new&nbsp;Employee();<br/>13:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;one.employeeId&nbsp;=&nbsp;101;<br/>14:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Employee&nbsp;two&nbsp;=&nbsp;new&nbsp;Employee();<br/>15:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;two.employeeId&nbsp;=&nbsp;101;<br/>16:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(one.equals(two))&nbsp;System.out.println(&quot;Success&quot;);<br/>17:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;System.out.println(&quot;Failure&quot;);<br/>18:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;}<br/>&nbsp;$&nbsp;$1
115$Which&nbsp;of&nbsp;the&nbsp;following&nbsp;statements&nbsp;are&nbsp;true&nbsp;about&nbsp;the&nbsp;equals()&nbsp;method?&nbsp;(Choose&nbsp;all&nbsp;that&nbsp;apply.)$B,&nbsp;E.&nbsp;equals()&nbsp;should&nbsp;return&nbsp;false&nbsp;when&nbsp;the&nbsp;object&nbsp;it&nbsp;passed&nbsp;in&nbsp;is&nbsp;not&nbsp;equal&nbsp;to&nbsp;the&nbsp;current&nbsp;object.&nbsp;This&nbsp;includes&nbsp;null&nbsp;and&nbsp;incorrect&nbsp;types.&nbsp;An&nbsp;equals()&nbsp;method&nbsp;should&nbsp;have&nbsp;a&nbsp;null&nbsp;check&nbsp;and&nbsp;an&nbsp;instanceof&nbsp;check.&nbsp;$1
215$Which&nbsp;of&nbsp;the&nbsp;following&nbsp;statements&nbsp;about&nbsp;polymorphism&nbsp;are&nbsp;true?&nbsp;(Choose&nbsp;all&nbsp;that&nbsp;apply.)$B,&nbsp;C.&nbsp;A&nbsp;reference&nbsp;to&nbsp;an&nbsp;object&nbsp;requires&nbsp;an&nbsp;explicit&nbsp;cast&nbsp;if&nbsp;referenced&nbsp;with&nbsp;a&nbsp;subclass,&nbsp;so&nbsp;A&nbsp;is&nbsp;incorrect.&nbsp;If&nbsp;the&nbsp;cast&nbsp;is&nbsp;to&nbsp;a&nbsp;superclass&nbsp;reference,&nbsp;then&nbsp;an&nbsp;explicit&nbsp;cast&nbsp;is&nbsp;not&nbsp;required,&nbsp;so&nbsp;C&nbsp;is&nbsp;correct.&nbsp;If&nbsp;a&nbsp;method&nbsp;takes&nbsp;the&nbsp;superclass&nbsp;of&nbsp;an&nbsp;object&nbsp;as&nbsp;a&nbsp;parameter,&nbsp;then&nbsp;any&nbsp;subclass&nbsp;references&nbsp;may&nbsp;be&nbsp;used&nbsp;without&nbsp;a&nbsp;cast,&nbsp;so&nbsp;B&nbsp;is&nbsp;correct.&nbsp;Some&nbsp;cast&nbsp;exceptions&nbsp;can&nbsp;be&nbsp;detected&nbsp;as&nbsp;errors&nbsp;at&nbsp;compile-time,&nbsp;but&nbsp;others&nbsp;can&nbsp;only&nbsp;be&nbsp;detected&nbsp;at&nbsp;runtime,&nbsp;so&nbsp;D&nbsp;is&nbsp;incorrect.&nbsp;Due&nbsp;to&nbsp;the&nbsp;nature&nbsp;of&nbsp;polymorphism,&nbsp;a&nbsp;public&nbsp;instance&nbsp;method&nbsp;can&nbsp;be&nbsp;overridden&nbsp;in&nbsp;a&nbsp;subclass&nbsp;and&nbsp;calls&nbsp;to&nbsp;it&nbsp;will&nbsp;be&nbsp;replaced&nbsp;even&nbsp;in&nbsp;the&nbsp;superclass&nbsp;in&nbsp;which&nbsp;it&nbsp;was&nbsp;defined,&nbsp;so&nbsp;E&nbsp;is&nbsp;incorrect.$2
315$What&nbsp;is&nbsp;the&nbsp;result&nbsp;of&nbsp;the&nbsp;following&nbsp;code?<br/>&nbsp;Comparator&lt;Integer&gt;&nbsp;c&nbsp;=&nbsp;(o1,&nbsp;o2)&nbsp;-&gt;&nbsp;o2â€”o1;<br/>&nbsp;List&lt;Integer&gt;&nbsp;list&nbsp;=&nbsp;Arrays.asList(5,&nbsp;4,&nbsp;7,&nbsp;1);<br/>&nbsp;Collections.sort(list,&nbsp;c);<br/>&nbsp;System.out.println(Collections.binarySearch(list,&nbsp;1));$D.&nbsp;The&nbsp;list&nbsp;is&nbsp;sorted&nbsp;in&nbsp;descending&nbsp;order.&nbsp;However,&nbsp;it&nbsp;is&nbsp;searched&nbsp;using&nbsp;the&nbsp;default&nbsp;order,&nbsp;which&nbsp;is&nbsp;sorted&nbsp;in&nbsp;ascending&nbsp;order.&nbsp;binarySearch()&nbsp;requires&nbsp;both&nbsp;to&nbsp;use&nbsp;the&nbsp;same&nbsp;sort&nbsp;order.&nbsp;Therefore,&nbsp;the&nbsp;precondition&nbsp;for&nbsp;binarySearch()&nbsp;is&nbsp;not&nbsp;met&nbsp;and&nbsp;the&nbsp;result&nbsp;is&nbsp;undefined.$3
415$The&nbsp;partitioningBy()&nbsp;collector&nbsp;creates&nbsp;a&nbsp;Map&lt;Boolean,&nbsp;List&lt;String&gt;&gt;&nbsp;when&nbsp;passed&nbsp;to&nbsp;collect()&nbsp;by&nbsp;default.&nbsp;When&nbsp;specific&nbsp;parameters&nbsp;are&nbsp;passed&nbsp;to&nbsp;partitioningBy(),&nbsp;which&nbsp;return&nbsp;types&nbsp;can&nbsp;be&nbsp;created?&nbsp;(Choose&nbsp;all&nbsp;that&nbsp;apply.)$D,&nbsp;E.&nbsp;Choices&nbsp;A&nbsp;and&nbsp;B&nbsp;do&nbsp;not&nbsp;compile,&nbsp;because&nbsp;they&nbsp;are&nbsp;invalid&nbsp;generic&nbsp;declarations.&nbsp;Primitives&nbsp;are&nbsp;not&nbsp;allowed&nbsp;as&nbsp;generics,&nbsp;and&nbsp;Map&nbsp;must&nbsp;have&nbsp;two&nbsp;generic&nbsp;types.&nbsp;Choice&nbsp;C&nbsp;is&nbsp;incorrect&nbsp;because&nbsp;partitioning&nbsp;only&nbsp;gives&nbsp;a&nbsp;Boolean&nbsp;key.&nbsp;Choices&nbsp;D&nbsp;and&nbsp;E&nbsp;are&nbsp;correct&nbsp;because&nbsp;the&nbsp;result&nbsp;Collection&nbsp;can&nbsp;be&nbsp;customized.$4
615$class&nbsp;One&nbsp;extends&nbsp;RuntimeException{}<br/>class&nbsp;Two&nbsp;extends&nbsp;Exception{}<br/>class&nbsp;Three&nbsp;extends&nbsp;Error{}<br/>class&nbsp;Four&nbsp;extends&nbsp;One{}<br/>class&nbsp;Five&nbsp;extends&nbsp;Two{}<br/>class&nbsp;Six&nbsp;extends&nbsp;Three{}$B,&nbsp;E.&nbsp;A&nbsp;checked&nbsp;exception&nbsp;extends&nbsp;Exception&nbsp;but&nbsp;not&nbsp;RuntimeException.&nbsp;The&nbsp;entire&nbsp;hierarchy&nbsp;counts,&nbsp;so&nbsp;B&nbsp;and&nbsp;E&nbsp;are&nbsp;both&nbsp;correct.$6
715$Which&nbsp;of&nbsp;the&nbsp;following&nbsp;are&nbsp;valid&nbsp;Callable&nbsp;expressions?&nbsp;(Choose&nbsp;all&nbsp;that&nbsp;apply.)$C,&nbsp;E,&nbsp;G.&nbsp;A&nbsp;Callable&nbsp;lambda&nbsp;expression&nbsp;takes&nbsp;no&nbsp;values&nbsp;and&nbsp;returns&nbsp;a&nbsp;generic&nbsp;type;&nbsp;therefore&nbsp;C,&nbsp;E,&nbsp;and&nbsp;G&nbsp;are&nbsp;correct.&nbsp;A&nbsp;and&nbsp;F&nbsp;are&nbsp;incorrect&nbsp;because&nbsp;they&nbsp;both&nbsp;take&nbsp;an&nbsp;input&nbsp;parameter.&nbsp;B&nbsp;is&nbsp;a&nbsp;Runnable&nbsp;lambda&nbsp;expression,&nbsp;because&nbsp;it&nbsp;does&nbsp;not&nbsp;return&nbsp;a&nbsp;value,&nbsp;but&nbsp;it&nbsp;is&nbsp;not&nbsp;a$7
116$public&nbsp;class&nbsp;Outer&nbsp;{<br/>class&nbsp;Inner&nbsp;{&nbsp;}<br/>public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{<br/>//&nbsp;INSERT&nbsp;CODE&nbsp;HERE<br/>}&nbsp;}$E.&nbsp;This&nbsp;is&nbsp;a&nbsp;member&nbsp;inner&nbsp;class.&nbsp;It&nbsp;needs&nbsp;to&nbsp;be&nbsp;created&nbsp;using&nbsp;an&nbsp;instance&nbsp;of&nbsp;the&nbsp;outer&nbsp;class.<br/>The&nbsp;syntax&nbsp;looks&nbsp;weird,&nbsp;but&nbsp;it&nbsp;creates&nbsp;an&nbsp;object&nbsp;of&nbsp;the&nbsp;outer&nbsp;class&nbsp;and&nbsp;then&nbsp;an&nbsp;object&nbsp;of&nbsp;the<br/>inner&nbsp;class&nbsp;from&nbsp;it.$1
216$1:&nbsp;public&nbsp;interface&nbsp;Herbivore&nbsp;{<br/>2:&nbsp;int&nbsp;amount&nbsp;=&nbsp;10;<br/>3:&nbsp;public&nbsp;static&nbsp;void&nbsp;eatGrass();<br/>4:&nbsp;public&nbsp;int&nbsp;chew()&nbsp;{<br/>5:&nbsp;return&nbsp;13;<br/>6:&nbsp;}<br/>7:&nbsp;}<br/>$F.&nbsp;The&nbsp;interface&nbsp;variable&nbsp;amount&nbsp;is&nbsp;correctly&nbsp;declared,&nbsp;with&nbsp;public,&nbsp;static,&nbsp;and&nbsp;final<br/>being&nbsp;assumed&nbsp;and&nbsp;automatically&nbsp;inserted&nbsp;by&nbsp;the&nbsp;compiler,&nbsp;so&nbsp;B&nbsp;is&nbsp;incorrect.&nbsp;The&nbsp;method<br/>declaration&nbsp;for&nbsp;eatGrass()&nbsp;on&nbsp;line&nbsp;3&nbsp;is&nbsp;incorrect&nbsp;because&nbsp;the&nbsp;method&nbsp;has&nbsp;been&nbsp;marked&nbsp;as<br/>static&nbsp;but&nbsp;no&nbsp;method&nbsp;body&nbsp;has&nbsp;been&nbsp;provided.&nbsp;The&nbsp;method&nbsp;declaration&nbsp;for&nbsp;chew()&nbsp;on<br/>line&nbsp;4&nbsp;is&nbsp;also&nbsp;incorrect,&nbsp;since&nbsp;an&nbsp;interface&nbsp;method&nbsp;that&nbsp;provides&nbsp;a&nbsp;body&nbsp;must&nbsp;be&nbsp;marked&nbsp;as<br/>default&nbsp;or&nbsp;static&nbsp;explicitly.&nbsp;Therefore,&nbsp;F&nbsp;is&nbsp;the&nbsp;correct&nbsp;answer&nbsp;since&nbsp;this&nbsp;code&nbsp;contains<br/>two&nbsp;compile-time&nbsp;errors.$2
316$Which&nbsp;of&nbsp;the&nbsp;following&nbsp;statements&nbsp;are&nbsp;true?&nbsp;(Choose&nbsp;all&nbsp;that&nbsp;apply.)$B,&nbsp;D,&nbsp;F.&nbsp;The&nbsp;java.lang.Comparable&nbsp;interface&nbsp;is&nbsp;implemented&nbsp;on&nbsp;the&nbsp;object&nbsp;to&nbsp;compare.&nbsp;It&nbsp;specifies&nbsp;the&nbsp;compareTo()&nbsp;method,&nbsp;which&nbsp;takes&nbsp;one&nbsp;parameter.&nbsp;The&nbsp;java.&nbsp;util.Comparator&nbsp;interface&nbsp;specifies&nbsp;the&nbsp;compare()&nbsp;method,&nbsp;which&nbsp;takes&nbsp;two&nbsp;parameters.$3
416$What&nbsp;is&nbsp;the&nbsp;output&nbsp;of&nbsp;the&nbsp;following?<br/>Stream&lt;String&gt;&nbsp;s&nbsp;=&nbsp;Stream.empty();<br/>Stream&lt;String&gt;&nbsp;s2&nbsp;=&nbsp;Stream.empty();<br/>Map&lt;Boolean,&nbsp;List&lt;String&gt;&gt;&nbsp;p&nbsp;=&nbsp;s.collect(<br/>Collectors.partitioningBy(b&nbsp;-&gt;&nbsp;b.startsWith(&quot;c&quot;)));<br/>Map&lt;Boolean,&nbsp;List&lt;String&gt;&gt;&nbsp;g&nbsp;=&nbsp;s2.collect(<br/>Collectors.groupingBy(b&nbsp;-&gt;&nbsp;b.startsWith(&quot;c&quot;)));<br/>System.out.println(p&nbsp;+&nbsp;&quot;&nbsp;&quot;&nbsp;+&nbsp;g);$C.&nbsp;The&nbsp;partitioningBy()&nbsp;operation&nbsp;always&nbsp;returns&nbsp;a&nbsp;map&nbsp;with&nbsp;two&nbsp;Boolean&nbsp;keys,&nbsp;even&nbsp;if&nbsp;there&nbsp;are&nbsp;no&nbsp;corresponding&nbsp;values.&nbsp;By&nbsp;contrast,&nbsp;groupingBy()&nbsp;returns&nbsp;only&nbsp;keys&nbsp;that&nbsp;are&nbsp;actually&nbsp;needed.$4
616$public&nbsp;class&nbsp;Test&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;class&nbsp;Door&nbsp;implements&nbsp;AutoCloseable&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;close()&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(&quot;D&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;RuntimeException();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;class&nbsp;Window&nbsp;implements&nbsp;Closeable&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;close()&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(&quot;W&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;RuntimeException();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try(Door&nbsp;door&nbsp;=&nbsp;new&nbsp;Door();&nbsp;Window&nbsp;w&nbsp;=&nbsp;new&nbsp;Window();)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(&quot;T&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch&nbsp;(Exception&nbsp;e)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(&quot;E&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;finally&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(&quot;F&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;}&nbsp;}$C.&nbsp;The&nbsp;exception&nbsp;inside&nbsp;the&nbsp;try&nbsp;block&nbsp;becomes&nbsp;the&nbsp;primary&nbsp;exception&nbsp;since&nbsp;it&nbsp;is&nbsp;thrown&nbsp;first.&nbsp;Then&nbsp;two&nbsp;suppressed&nbsp;exceptions&nbsp;are&nbsp;added&nbsp;to&nbsp;it&nbsp;when&nbsp;trying&nbsp;to&nbsp;close&nbsp;the&nbsp;AutoCloseable&nbsp;resources.$6
716$What&nbsp;is&nbsp;the&nbsp;result&nbsp;of&nbsp;executing&nbsp;the&nbsp;following&nbsp;application?&nbsp;(Choose&nbsp;all&nbsp;that&nbsp;apply.)<br/>import&nbsp;java.util.concurrent.*;<br/>import&nbsp;java.util.stream.*;<br/>public&nbsp;class&nbsp;PrintConstants&nbsp;{<br/>public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{<br/>ExecutorService&nbsp;service&nbsp;=&nbsp;Executors.newScheduledThreadPool(10);<br/>DoubleStream.of(3.14159,2.71828)&nbsp;//&nbsp;b1<br/>.forEach(c&nbsp;-&gt;&nbsp;service.submit(&nbsp;//&nbsp;b2<br/>()&nbsp;-&gt;&nbsp;System.out.println(10*c)));&nbsp;//&nbsp;b3<br/>service.execute(()&nbsp;-&gt;&nbsp;System.out.println(&quot;Printed&quot;));&nbsp;//&nbsp;b4<br/>}<br/>}$F,&nbsp;H.&nbsp;The&nbsp;application&nbsp;compiles&nbsp;and&nbsp;does&nbsp;not&nbsp;throw&nbsp;an&nbsp;exception,&nbsp;so&nbsp;B,&nbsp;C,&nbsp;D,&nbsp;E,&nbsp;and&nbsp;G&nbsp;are&nbsp;incorrect.&nbsp;Even&nbsp;though&nbsp;the&nbsp;stream&nbsp;is&nbsp;processed&nbsp;in&nbsp;sequential&nbsp;order,&nbsp;the&nbsp;tasks&nbsp;are&nbsp;submitted&nbsp;to&nbsp;a&nbsp;thread&nbsp;executor,&nbsp;which&nbsp;may&nbsp;complete&nbsp;the&nbsp;tasks&nbsp;in&nbsp;any&nbsp;order.&nbsp;Therefore,&nbsp;the&nbsp;output&nbsp;cannot&nbsp;be&nbsp;determined&nbsp;ahead&nbsp;of&nbsp;time&nbsp;and&nbsp;F&nbsp;is&nbsp;correct,&nbsp;making&nbsp;A&nbsp;incorrect.&nbsp;Finally,&nbsp;the&nbsp;thread&nbsp;executor&nbsp;is&nbsp;never&nbsp;shut&nbsp;down;&nbsp;therefore&nbsp;the&nbsp;code&nbsp;will&nbsp;run&nbsp;but&nbsp;it&nbsp;will&nbsp;never&nbsp;terminate,&nbsp;making&nbsp;H&nbsp;also&nbsp;correct.$7
117$What&nbsp;is&nbsp;the&nbsp;result&nbsp;of&nbsp;the&nbsp;following&nbsp;code?&nbsp;(Choose&nbsp;all&nbsp;that&nbsp;apply.)<br/>1:&nbsp;public&nbsp;enum&nbsp;AnimalClasses&nbsp;{<br/>2:&nbsp;MAMMAL(true),&nbsp;FISH(Boolean.FALSE),&nbsp;BIRD(false),<br/>3:&nbsp;REPTILE(false),&nbsp;AMPHIBIAN(false),&nbsp;INVERTEBRATE(false)<br/>4:&nbsp;boolean&nbsp;hasHair;<br/>5:&nbsp;public&nbsp;AnimalClasses(boolean&nbsp;hasHair)&nbsp;{<br/>6:&nbsp;this.hasHair&nbsp;=&nbsp;hasHair;<br/>7:&nbsp;}<br/>8:&nbsp;public&nbsp;boolean&nbsp;hasHair()&nbsp;{<br/>9:&nbsp;return&nbsp;hasHair;<br/>10:&nbsp;}<br/>11:&nbsp;public&nbsp;void&nbsp;giveWig()&nbsp;{<br/>12:&nbsp;hasHair&nbsp;=&nbsp;true;<br/>13:&nbsp;}&nbsp;}$B,&nbsp;C.&nbsp;Enums&nbsp;are&nbsp;required&nbsp;to&nbsp;have&nbsp;a&nbsp;semicolon&nbsp;after&nbsp;the&nbsp;list&nbsp;of&nbsp;values&nbsp;if&nbsp;there&nbsp;is&nbsp;anything&nbsp;else&nbsp;in&nbsp;the&nbsp;enum.&nbsp;Donâ€™t&nbsp;worry;&nbsp;you&nbsp;wonâ€™t&nbsp;be&nbsp;expected&nbsp;to&nbsp;track&nbsp;down&nbsp;missing&nbsp;semicolons&nbsp;on&nbsp;the&nbsp;whole&nbsp;examâ€”only&nbsp;on&nbsp;enum&nbsp;questions.&nbsp;Enums&nbsp;are&nbsp;not&nbsp;allowed&nbsp;to&nbsp;have&nbsp;a&nbsp;public&nbsp;constructor.$1
217$Which&nbsp;of&nbsp;the&nbsp;following&nbsp;are&nbsp;properties&nbsp;of&nbsp;classes&nbsp;that&nbsp;are&nbsp;properly&nbsp;encapsulated&nbsp;as&nbsp;a&nbsp;JavaBean?&nbsp;(Choose&nbsp;all&nbsp;that&nbsp;apply.)$B,&nbsp;C,&nbsp;F.&nbsp;Options&nbsp;B,&nbsp;C,&nbsp;and&nbsp;F&nbsp;are&nbsp;each&nbsp;correct&nbsp;statements&nbsp;about&nbsp;JavaBean&nbsp;encapsulation.A&nbsp;is&nbsp;incorrect,&nbsp;as&nbsp;that&nbsp;is&nbsp;a&nbsp;property&nbsp;of&nbsp;the&nbsp;immutable&nbsp;object&nbsp;pattern,&nbsp;not&nbsp;encapsulation.&nbsp;D&nbsp;is&nbsp;incorrect,&nbsp;as&nbsp;there&nbsp;is&nbsp;no&nbsp;such&nbsp;JavaBean&nbsp;interface&nbsp;defined&nbsp;in&nbsp;the&nbsp;Java&nbsp;API.&nbsp;Finally,&nbsp;E&nbsp;is&nbsp;incorrect,&nbsp;as&nbsp;handling&nbsp;instantiation&nbsp;is&nbsp;not&nbsp;part&nbsp;of&nbsp;encapsulation.$2
317$Which&nbsp;two&nbsp;options&nbsp;can&nbsp;fill&nbsp;in&nbsp;the&nbsp;blanks&nbsp;to&nbsp;make&nbsp;this&nbsp;code&nbsp;compile?&nbsp;(Choose&nbsp;all&nbsp;that&nbsp;apply.)<br/>1:&nbsp;public&nbsp;class&nbsp;Generic________&nbsp;{<br/>2:&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{<br/>3:&nbsp;Generic&lt;String&gt;&nbsp;g&nbsp;=&nbsp;new&nbsp;Generic_______();<br/>4:&nbsp;Generic&lt;Object&gt;&nbsp;g2&nbsp;=&nbsp;new&nbsp;Generic();<br/>5:&nbsp;}<br/>6:&nbsp;}<br/>$B,&nbsp;D.&nbsp;Line&nbsp;1&nbsp;is&nbsp;a&nbsp;generic&nbsp;class&nbsp;that&nbsp;requires&nbsp;specifying&nbsp;a&nbsp;name&nbsp;for&nbsp;the&nbsp;type.&nbsp;Options&nbsp;A&nbsp;and&nbsp;C&nbsp;are&nbsp;incorrect&nbsp;because&nbsp;no&nbsp;type&nbsp;is&nbsp;specified.&nbsp;Line&nbsp;3&nbsp;tries&nbsp;to&nbsp;use&nbsp;the&nbsp;diamond&nbsp;operator&nbsp;to&nbsp;instantiate&nbsp;the&nbsp;class.&nbsp;Option&nbsp;E&nbsp;is&nbsp;incorrect&nbsp;because&nbsp;T&nbsp;is&nbsp;not&nbsp;a&nbsp;class&nbsp;and&nbsp;certainly&nbsp;not&nbsp;one&nbsp;compatible&nbsp;with&nbsp;String.&nbsp;Option&nbsp;F&nbsp;is&nbsp;incorrect&nbsp;because&nbsp;a&nbsp;wildcard&nbsp;cannot&nbsp;be&nbsp;specified&nbsp;on&nbsp;the&nbsp;right&nbsp;side&nbsp;when&nbsp;instantiating&nbsp;an&nbsp;object.$3
417$Which&nbsp;of&nbsp;the&nbsp;following&nbsp;is&nbsp;equivalent&nbsp;to&nbsp;this&nbsp;code?<br/>UnaryOperator&lt;Integer&gt;&nbsp;u&nbsp;=&nbsp;x&nbsp;-&gt;&nbsp;x&nbsp;*&nbsp;x;$E.&nbsp;A&nbsp;UnaryOperator&nbsp;is&nbsp;a&nbsp;special&nbsp;type&nbsp;of&nbsp;function&nbsp;where&nbsp;the&nbsp;parameter&nbsp;and&nbsp;return&nbsp;type&nbsp;are&nbsp;the&nbsp;same.&nbsp;Therefore,&nbsp;option&nbsp;E&nbsp;is&nbsp;correct.&nbsp;Notice&nbsp;that&nbsp;other&nbsp;options&nbsp;donâ€™t&nbsp;even&nbsp;compile&nbsp;because&nbsp;they&nbsp;have&nbsp;the&nbsp;wrong&nbsp;number&nbsp;of&nbsp;generic&nbsp;types&nbsp;for&nbsp;the&nbsp;functional&nbsp;interface&nbsp;provided.$4
617$Fill&nbsp;in&nbsp;the&nbsp;blank:&nbsp;A&nbsp;class&nbsp;that&nbsp;implements&nbsp;_________________&nbsp;may&nbsp;be&nbsp;in&nbsp;a&nbsp;try-with-resource<br/>statement.&nbsp;(Choose&nbsp;all&nbsp;that&nbsp;apply.)$A,&nbsp;B.&nbsp;Closeable&nbsp;was&nbsp;the&nbsp;original&nbsp;interface&nbsp;for&nbsp;IO&nbsp;classes.&nbsp;AutoCloseable&nbsp;was&nbsp;added&nbsp;in&nbsp;Java&nbsp;7&nbsp;along&nbsp;with&nbsp;try-with-resources.&nbsp;Closeable&nbsp;extends&nbsp;AutoCloseable&nbsp;for&nbsp;backward&nbsp;compatibility.$6
717$Assuming&nbsp;100&nbsp;milliseconds&nbsp;is&nbsp;enough&nbsp;time&nbsp;for&nbsp;the&nbsp;tasks&nbsp;submitted&nbsp;to&nbsp;the&nbsp;thread&nbsp;executor&nbsp;to<br/>complete,&nbsp;what&nbsp;is&nbsp;the&nbsp;result&nbsp;of&nbsp;executing&nbsp;the&nbsp;following&nbsp;program?&nbsp;(Choose&nbsp;all&nbsp;that&nbsp;apply.)<br/>import&nbsp;java.util.concurrent.*;<br/>public&nbsp;class&nbsp;SheepManager&nbsp;{<br/>private&nbsp;static&nbsp;AtomicInteger&nbsp;sheepCount1&nbsp;=&nbsp;new&nbsp;AtomicInteger(0);&nbsp;//&nbsp;w1<br/>private&nbsp;static&nbsp;int&nbsp;sheepCount2&nbsp;=&nbsp;0;<br/>public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;throws&nbsp;InterruptedException&nbsp;{<br/>ExecutorService&nbsp;service&nbsp;=&nbsp;null;<br/>try&nbsp;{<br/>service&nbsp;=&nbsp;Executors.newSingleThreadExecutor();&nbsp;//&nbsp;w2<br/>for(int&nbsp;i=0;&nbsp;i&lt;100;&nbsp;i++)<br/>service.execute(()&nbsp;-&gt;<br/>{sheepCount1.getAndIncrement();&nbsp;sheepCount2++;});&nbsp;//&nbsp;w3<br/>Thread.sleep(100);<br/>System.out.println(sheepCount1+&quot;&nbsp;&quot;+sheepCount2);<br/>}&nbsp;finally&nbsp;{<br/>if(service&nbsp;!=&nbsp;null)&nbsp;service.shutdown();<br/>}<br/>}$B.&nbsp;The&nbsp;code&nbsp;compiles&nbsp;and&nbsp;runs&nbsp;without&nbsp;issue,&nbsp;so&nbsp;D,&nbsp;E,&nbsp;F,&nbsp;and&nbsp;G&nbsp;are&nbsp;incorrect.&nbsp;The&nbsp;key&nbsp;aspect&nbsp;to&nbsp;notice&nbsp;in&nbsp;the&nbsp;code&nbsp;is&nbsp;that&nbsp;a&nbsp;single-thread&nbsp;executor&nbsp;is&nbsp;used,&nbsp;meaning&nbsp;that&nbsp;no&nbsp;task&nbsp;will&nbsp;be&nbsp;executed&nbsp;concurrently.&nbsp;Therefore,&nbsp;the&nbsp;results&nbsp;are&nbsp;valid&nbsp;and&nbsp;predictable&nbsp;with&nbsp;100&nbsp;100&nbsp;being&nbsp;the&nbsp;output,&nbsp;and&nbsp;B&nbsp;is&nbsp;the&nbsp;correct&nbsp;answer.&nbsp;If&nbsp;a&nbsp;pooled&nbsp;thread&nbsp;executor&nbsp;was&nbsp;used&nbsp;with&nbsp;at&nbsp;least&nbsp;two&nbsp;threads,&nbsp;then&nbsp;the&nbsp;sheepCount2++&nbsp;operations&nbsp;could&nbsp;overwrite&nbsp;each&nbsp;other,&nbsp;making&nbsp;the&nbsp;second&nbsp;value&nbsp;indeterminate&nbsp;at&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;program.&nbsp;In&nbsp;this&nbsp;case,&nbsp;C&nbsp;would&nbsp;be&nbsp;the&nbsp;correct&nbsp;answer.$7
118$What&nbsp;is&nbsp;the&nbsp;result&nbsp;of&nbsp;the&nbsp;following&nbsp;code?&nbsp;(Choose&nbsp;all&nbsp;that&nbsp;apply.)<br/>public&nbsp;class&nbsp;Swimmer&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;enum&nbsp;AnimalClasses&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MAMMAL,&nbsp;FISH&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasFins()&nbsp;{&nbsp;return&nbsp;true;&nbsp;}},<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BIRD,&nbsp;REPTILE,&nbsp;AMPHIBIAN,&nbsp;INVERTEBRATE;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;abstract&nbsp;boolean&nbsp;hasFins();<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(AnimalClasses.FISH);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(AnimalClasses.FISH.ordinal());<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(AnimalClasses.FISH.hasFins());<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(AnimalClasses.BIRD.hasFins());<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}$G.&nbsp;This&nbsp;question&nbsp;appears&nbsp;to&nbsp;be&nbsp;about&nbsp;enums&nbsp;but&nbsp;is&nbsp;really&nbsp;about&nbsp;abstract&nbsp;methods.&nbsp;Just&nbsp;as&nbsp;an&nbsp;abstract&nbsp;superclass&nbsp;requires&nbsp;concrete&nbsp;subclasses&nbsp;to&nbsp;have&nbsp;an&nbsp;implementation,&nbsp;abstract&nbsp;enum&nbsp;methods&nbsp;require&nbsp;each&nbsp;enum&nbsp;type&nbsp;to&nbsp;implement&nbsp;the&nbsp;method.$1
218$Which&nbsp;of&nbsp;the&nbsp;following&nbsp;statements&nbsp;about&nbsp;inheritance&nbsp;and&nbsp;object&nbsp;composition&nbsp;are&nbsp;correct?<br/>(Choose&nbsp;all&nbsp;that&nbsp;apply.)$A,&nbsp;B,&nbsp;E.&nbsp;A&nbsp;is&nbsp;correct,&nbsp;and&nbsp;it&nbsp;is&nbsp;one&nbsp;of&nbsp;the&nbsp;reasons&nbsp;to&nbsp;prefer&nbsp;class&nbsp;inheritance&nbsp;over&nbsp;object&nbsp;composition.&nbsp;B&nbsp;is&nbsp;also&nbsp;correct,&nbsp;since&nbsp;object&nbsp;composition&nbsp;tends&nbsp;to&nbsp;lead&nbsp;to&nbsp;classes&nbsp;that&nbsp;are&nbsp;easier&nbsp;to&nbsp;reference,&nbsp;as&nbsp;they&nbsp;don&#x2019;t&nbsp;require&nbsp;knowledge&nbsp;of&nbsp;any&nbsp;parent&nbsp;classes.&nbsp;C&nbsp;is&nbsp;incorrect,&nbsp;as&nbsp;inheritance&nbsp;tends&nbsp;to&nbsp;use&nbsp;the&nbsp;is-a&nbsp;principle,&nbsp;whereas&nbsp;object&nbsp;composition&nbsp;relies&nbsp;on&nbsp;the&nbsp;has-a&nbsp;principle.&nbsp;D&nbsp;is&nbsp;incorrect,&nbsp;as&nbsp;this&nbsp;is&nbsp;a&nbsp;statement&nbsp;about&nbsp;inheritance,&nbsp;not&nbsp;object&nbsp;composition.&nbsp;E&nbsp;is&nbsp;correct,&nbsp;as&nbsp;object&nbsp;composition&nbsp;has&nbsp;no&nbsp;notion&nbsp;of&nbsp;inheritance&nbsp;and&nbsp;variables&nbsp;must&nbsp;be&nbsp;exposed&nbsp;publically&nbsp;if&nbsp;they&nbsp;are&nbsp;to&nbsp;be&nbsp;used&nbsp;by&nbsp;other&nbsp;classes&nbsp;in&nbsp;different&nbsp;packages.&nbsp;F&nbsp;is&nbsp;incorrect,&nbsp;as&nbsp;neither&nbsp;are&nbsp;always&nbsp;the&nbsp;right&nbsp;answer.&nbsp;There&nbsp;are&nbsp;situations&nbsp;where&nbsp;inheritance&nbsp;is&nbsp;more&nbsp;appropriate,&nbsp;and&nbsp;situations&nbsp;where&nbsp;object&nbsp;composition&nbsp;is&nbsp;more&nbsp;appropriate.$2
318$Which&nbsp;of&nbsp;the&nbsp;following&nbsp;lines&nbsp;can&nbsp;be&nbsp;inserted&nbsp;to&nbsp;make&nbsp;the&nbsp;code&nbsp;compile?&nbsp;(Choose&nbsp;all&nbsp;that&nbsp;apply.)<br/>class&nbsp;A&nbsp;{}<br/>class&nbsp;B&nbsp;extends&nbsp;A&nbsp;{}<br/>class&nbsp;C&nbsp;extends&nbsp;B&nbsp;{}<br/>class&nbsp;D&lt;C&gt;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;INSERT&nbsp;CODE&nbsp;HERE<br/>}$A,&nbsp;B.&nbsp;C&nbsp;is&nbsp;both&nbsp;a&nbsp;class&nbsp;and&nbsp;a&nbsp;type&nbsp;parameter.&nbsp;This&nbsp;means&nbsp;that&nbsp;within&nbsp;the&nbsp;class&nbsp;D,&nbsp;when&nbsp;we&nbsp;refer&nbsp;to&nbsp;C,&nbsp;it&nbsp;uses&nbsp;the&nbsp;type&nbsp;parameter.&nbsp;All&nbsp;of&nbsp;the&nbsp;choices&nbsp;that&nbsp;mention&nbsp;class&nbsp;C&nbsp;are&nbsp;incorrect&nbsp;because&nbsp;it&nbsp;no&nbsp;longer&nbsp;means&nbsp;the&nbsp;class&nbsp;C.$3
418$What&nbsp;is&nbsp;the&nbsp;result&nbsp;of&nbsp;the&nbsp;following?<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;DoubleStream&nbsp;s&nbsp;=&nbsp;DoubleStream.of(1.2,&nbsp;2.4);<br/>&nbsp;&nbsp;&nbsp;&nbsp;s.peek(System.out::println).filter(x&nbsp;-&gt;&nbsp;x&nbsp;&gt;&nbsp;2).count();$D.&nbsp;The&nbsp;terminal&nbsp;operation&nbsp;is&nbsp;count().&nbsp;Since&nbsp;there&nbsp;is&nbsp;a&nbsp;terminal&nbsp;operation,&nbsp;the&nbsp;intermediate&nbsp;operations&nbsp;run.&nbsp;The&nbsp;peek()&nbsp;operation&nbsp;comes&nbsp;before&nbsp;the&nbsp;filter,&nbsp;so&nbsp;both&nbsp;numbers&nbsp;are&nbsp;printed.&nbsp;The&nbsp;count&nbsp;happens&nbsp;to&nbsp;be&nbsp;1&nbsp;since&nbsp;the&nbsp;other&nbsp;number&nbsp;is&nbsp;filtered.&nbsp;However,&nbsp;the&nbsp;result&nbsp;of&nbsp;the&nbsp;stream&nbsp;pipeline&nbsp;isn&#x2019;t&nbsp;stored&nbsp;in&nbsp;a&nbsp;variable,&nbsp;and&nbsp;that&nbsp;result&nbsp;is&nbsp;ignored.$4
618$Which&nbsp;pairs&nbsp;fill&nbsp;in&nbsp;the&nbsp;blanks?&nbsp;The&nbsp;close()&nbsp;method&nbsp;is&nbsp;not&nbsp;allowed&nbsp;to&nbsp;throw&nbsp;a(n)&nbsp;_________________&nbsp;in&nbsp;a&nbsp;class&nbsp;that&nbsp;implements&nbsp;_________________.&nbsp;(Choose&nbsp;all&nbsp;that&nbsp;apply.)$B.&nbsp;The&nbsp;main&nbsp;difference&nbsp;between&nbsp;AutoCloseable&nbsp;and&nbsp;Closeable&nbsp;is&nbsp;that&nbsp;AutoCloseable&nbsp;has&nbsp;Exception&nbsp;in&nbsp;the&nbsp;signature&nbsp;and&nbsp;Closeable&nbsp;has&nbsp;only&nbsp;IOException&nbsp;in&nbsp;the&nbsp;signature.&nbsp;Since&nbsp;IllegalStateException&nbsp;is&nbsp;a&nbsp;runtime&nbsp;exception,&nbsp;it&nbsp;can&nbsp;be&nbsp;thrown&nbsp;by&nbsp;any&nbsp;method.$6
718$import&nbsp;java.util.concurrent.*;<br/>import&nbsp;java.util.stream.*;<br/>public&nbsp;class&nbsp;StockRoomTracker&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;await(CyclicBarrier&nbsp;cb)&nbsp;{&nbsp;//&nbsp;j1<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cb.await();&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(InterruptedException&nbsp;|<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BrokenBarrierException&nbsp;e)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Handle&nbsp;exception<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CyclicBarrier&nbsp;cb&nbsp;=&nbsp;new&nbsp;CyclicBarrier(10,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;()&nbsp;-&gt;&nbsp;System.out.println(&quot;Stock&nbsp;Room&nbsp;Full!&quot;));&nbsp;//&nbsp;j2<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IntStream.iterate(1,&nbsp;i&nbsp;-&gt;&nbsp;1).limit(9)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.parallel().forEach(i&nbsp;-&gt;&nbsp;await(cb));&nbsp;//&nbsp;j3<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}$F.&nbsp;The&nbsp;code&nbsp;compiles&nbsp;without&nbsp;issue,&nbsp;so&nbsp;B,&nbsp;C,&nbsp;and&nbsp;D&nbsp;are&nbsp;incorrect.&nbsp;The&nbsp;limit&nbsp;on&nbsp;the&nbsp;cyclic&nbsp;barrier&nbsp;is&nbsp;10,&nbsp;but&nbsp;the&nbsp;stream&nbsp;can&nbsp;generate&nbsp;only&nbsp;up&nbsp;to&nbsp;9&nbsp;threads&nbsp;that&nbsp;reach&nbsp;the&nbsp;barrier;&nbsp;therefore&nbsp;the&nbsp;limit&nbsp;can&nbsp;never&nbsp;be&nbsp;reached,&nbsp;and&nbsp;F&nbsp;is&nbsp;the&nbsp;correct&nbsp;answer,&nbsp;making&nbsp;A&nbsp;and&nbsp;E&nbsp;incorrect.&nbsp;Note&nbsp;that&nbsp;even&nbsp;if&nbsp;the&nbsp;limit(9)&nbsp;statement&nbsp;was&nbsp;changed&nbsp;to&nbsp;limit(10),&nbsp;the&nbsp;program&nbsp;could&nbsp;still&nbsp;hang,&nbsp;since&nbsp;the&nbsp;JVM&nbsp;might&nbsp;not&nbsp;allocate&nbsp;10&nbsp;threads&nbsp;to&nbsp;the&nbsp;parallel&nbsp;stream.$7
119$Which&nbsp;of&nbsp;the&nbsp;following&nbsp;can&nbsp;be&nbsp;inserted&nbsp;to&nbsp;override&nbsp;the&nbsp;superclass&nbsp;method?&nbsp;(Choose&nbsp;all&nbsp;that&nbsp;apply.)<br/><br/>public&nbsp;class&nbsp;LearnToWalk&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;toddle()&nbsp;{}<br/>&nbsp;&nbsp;&nbsp;&nbsp;class&nbsp;BabyRhino&nbsp;extends&nbsp;LearnToWalk&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;INSERT&nbsp;CODE&nbsp;HERE<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}$A,&nbsp;C.&nbsp;An&nbsp;override&nbsp;must&nbsp;have&nbsp;the&nbsp;same&nbsp;method&nbsp;signature.&nbsp;A&nbsp;and&nbsp;C&nbsp;both&nbsp;do.&nbsp;F&nbsp;is&nbsp;an&nbsp;overload&nbsp;because&nbsp;it&nbsp;has&nbsp;a&nbsp;different&nbsp;parameter&nbsp;list.&nbsp;E&nbsp;does&nbsp;not&nbsp;compile&nbsp;because&nbsp;it&nbsp;throws&nbsp;a&nbsp;checked&nbsp;exception&nbsp;not&nbsp;declared&nbsp;in&nbsp;the&nbsp;superclass.&nbsp;D&nbsp;compiles&nbsp;but&nbsp;is&nbsp;not&nbsp;an&nbsp;override&nbsp;because&nbsp;it&nbsp;is&nbsp;static.&nbsp;B&nbsp;has&nbsp;a&nbsp;different&nbsp;method&nbsp;name,&nbsp;so&nbsp;it&nbsp;is&nbsp;not&nbsp;even&nbsp;an&nbsp;overload.$1
219$Which&nbsp;three&nbsp;scenarios&nbsp;would&nbsp;best&nbsp;benefit&nbsp;from&nbsp;using&nbsp;a&nbsp;singleton&nbsp;pattern?&nbsp;(Choose&nbsp;all&nbsp;three.)$B,&nbsp;D,&nbsp;E.&nbsp;A&nbsp;is&nbsp;incorrect,&nbsp;as&nbsp;that&nbsp;is&nbsp;a&nbsp;property&nbsp;of&nbsp;the&nbsp;immutable&nbsp;object&nbsp;pattern.&nbsp;B&nbsp;is&nbsp;correct,&nbsp;as&nbsp;caching&nbsp;data&nbsp;is&nbsp;one&nbsp;of&nbsp;the&nbsp;most&nbsp;common&nbsp;uses&nbsp;of&nbsp;the&nbsp;singleton&nbsp;pattern.&nbsp;While&nbsp;the&nbsp;singleton&nbsp;pattern&nbsp;may&nbsp;use&nbsp;lazy&nbsp;instantiation,&nbsp;it&nbsp;is&nbsp;not&nbsp;used&nbsp;to&nbsp;ensure&nbsp;that&nbsp;objects&nbsp;are&nbsp;lazily&nbsp;instantiated,&nbsp;so&nbsp;C&nbsp;is&nbsp;incorrect.&nbsp;D&nbsp;is&nbsp;correct,&nbsp;as&nbsp;we&nbsp;only&nbsp;want&nbsp;one&nbsp;class&nbsp;writing&nbsp;to&nbsp;a&nbsp;log&nbsp;file&nbsp;at&nbsp;once.E&nbsp;is&nbsp;also&nbsp;correct,&nbsp;as&nbsp;managing&nbsp;application-wide&nbsp;configuration&nbsp;data&nbsp;is&nbsp;another&nbsp;very&nbsp;common&nbsp;use&nbsp;of&nbsp;the&nbsp;singleton&nbsp;pattern.&nbsp;F&nbsp;is&nbsp;incorrect,&nbsp;as&nbsp;we&nbsp;only&nbsp;want&nbsp;one&nbsp;instance&nbsp;of&nbsp;a&nbsp;static&nbsp;object&nbsp;created&nbsp;when&nbsp;using&nbsp;the&nbsp;singleton&nbsp;pattern.$2
319$Which&nbsp;options&nbsp;are&nbsp;true&nbsp;of&nbsp;the&nbsp;following&nbsp;code?&nbsp;(Choose&nbsp;all&nbsp;that&nbsp;apply.)<br/>3:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;______________&lt;Integer&gt;&nbsp;q&nbsp;=&nbsp;new&nbsp;LinkedList&lt;&gt;();<br/>4:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q.add(10);<br/>5:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q.add(12);<br/>6:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q.remove(1);<br/>7:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(q);$A,&nbsp;D.&nbsp;A&nbsp;LinkedList&nbsp;implements&nbsp;both&nbsp;List&nbsp;and&nbsp;Queue.&nbsp;The&nbsp;List&nbsp;interface&nbsp;has&nbsp;a&nbsp;method&nbsp;to&nbsp;remove&nbsp;by&nbsp;index.&nbsp;Since&nbsp;this&nbsp;method&nbsp;exists,&nbsp;Java&nbsp;does&nbsp;not&nbsp;autobox&nbsp;to&nbsp;call&nbsp;the&nbsp;other&nbsp;method.&nbsp;Queue&nbsp;has&nbsp;only&nbsp;the&nbsp;remove&nbsp;by&nbsp;object&nbsp;method,&nbsp;so&nbsp;Java&nbsp;does&nbsp;autobox&nbsp;there.&nbsp;Since&nbsp;the&nbsp;number&nbsp;1&nbsp;is&nbsp;not&nbsp;in&nbsp;the&nbsp;list,&nbsp;Java&nbsp;does&nbsp;not&nbsp;remove&nbsp;anything&nbsp;for&nbsp;the&nbsp;Queue.$3
419$Which&nbsp;of&nbsp;the&nbsp;following&nbsp;return&nbsp;primitives?&nbsp;(Choose&nbsp;all&nbsp;that&nbsp;apply.)$A,&nbsp;C,&nbsp;E.&nbsp;The&nbsp;three&nbsp;common&nbsp;types&nbsp;of&nbsp;double,&nbsp;int&nbsp;and,&nbsp;long&nbsp;have&nbsp;dedicated&nbsp;supplier&nbsp;classes.&nbsp;The&nbsp;only&nbsp;primitive&nbsp;functional&nbsp;interface&nbsp;that&nbsp;does&nbsp;not&nbsp;involve&nbsp;one&nbsp;of&nbsp;those&nbsp;three&nbsp;types&nbsp;is&nbsp;BooleanSupplier.$4
619$Which&nbsp;of&nbsp;the&nbsp;following&nbsp;cannot&nbsp;fill&nbsp;in&nbsp;the&nbsp;blank?&nbsp;(Choose&nbsp;all&nbsp;that&nbsp;apply.)<br/><br/>public&nbsp;void&nbsp;read()&nbsp;throws&nbsp;SQLException&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;readFromDatabase();<br/>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(_________________&nbsp;e)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;e;<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}<br/><br/>private&nbsp;void&nbsp;readFromDatabase()&nbsp;throws&nbsp;SQLException&nbsp;{&nbsp;}$D.&nbsp;Choice&nbsp;A&nbsp;is&nbsp;allowed&nbsp;because&nbsp;Java&nbsp;7&nbsp;and&nbsp;later&nbsp;&#x201c;translates&#x201d;&nbsp;Exception&nbsp;in&nbsp;a&nbsp;catch&nbsp;block&nbsp;to&nbsp;the&nbsp;correct&nbsp;one.&nbsp;Choices&nbsp;C&nbsp;and&nbsp;E&nbsp;are&nbsp;allowed&nbsp;because&nbsp;they&nbsp;actually&nbsp;catch&nbsp;a&nbsp;SQLException.&nbsp;Choice&nbsp;D&nbsp;is&nbsp;not&nbsp;allowed&nbsp;because&nbsp;there&nbsp;is&nbsp;no&nbsp;IOException&nbsp;declared.&nbsp;Choice&nbsp;B&nbsp;is&nbsp;allowed&nbsp;because&nbsp;a&nbsp;method&nbsp;does&nbsp;not&nbsp;have&nbsp;to&nbsp;handle&nbsp;an&nbsp;exception&nbsp;if&nbsp;it&nbsp;declares&nbsp;it.$6
719$What&nbsp;statements&nbsp;about&nbsp;the&nbsp;following&nbsp;class&nbsp;definition&nbsp;are&nbsp;true?&nbsp;(Choose&nbsp;all&nbsp;that&nbsp;apply.)<br/><br/>public&nbsp;class&nbsp;TicketManager&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;TicketManager()&nbsp;{&nbsp;super();&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;TicketManager&nbsp;instance;<br/>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;synchronized&nbsp;TicketManager&nbsp;getInstance()&nbsp;{&nbsp;//&nbsp;k1<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(instance&nbsp;==&nbsp;null)&nbsp;instance&nbsp;=&nbsp;new&nbsp;TicketManager();&nbsp;//&nbsp;k2<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;instance;<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;int&nbsp;tickets;<br/>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;getTicketCount()&nbsp;{&nbsp;return&nbsp;tickets;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;makeTicketsAvailable(int&nbsp;value)&nbsp;{&nbsp;tickets&nbsp;+=&nbsp;value;&nbsp;}&nbsp;//&nbsp;k3<br/>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;sellTickets(int&nbsp;value)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(this)&nbsp;{&nbsp;//&nbsp;k4<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tickets&nbsp;-=&nbsp;value;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}$A,&nbsp;F.&nbsp;The&nbsp;class&nbsp;compiles&nbsp;without&nbsp;issue&nbsp;so&nbsp;A&nbsp;is&nbsp;correct,&nbsp;and&nbsp;B&nbsp;and&nbsp;C&nbsp;are&nbsp;incorrect.&nbsp;The<br/>synchronized&nbsp;object&nbsp;on&nbsp;line&nbsp;k1&nbsp;is&nbsp;TicketManager.class,&nbsp;while&nbsp;the&nbsp;synchronized&nbsp;object<br/>on&nbsp;line&nbsp;k4&nbsp;is&nbsp;the&nbsp;instance&nbsp;of&nbsp;TicketManager.&nbsp;The&nbsp;class&nbsp;is&nbsp;not&nbsp;thread-safe&nbsp;because<br/>the&nbsp;makeTicketsAvailable()&nbsp;method&nbsp;is&nbsp;not&nbsp;synchronized,&nbsp;and&nbsp;E&nbsp;is&nbsp;incorrect.&nbsp;One<br/>thread&nbsp;could&nbsp;call&nbsp;sellTickets()&nbsp;while&nbsp;another&nbsp;thread&nbsp;has&nbsp;unblocked&nbsp;accessed&nbsp;to<br/>makeTicketsAvailable(),&nbsp;causing&nbsp;an&nbsp;invalid&nbsp;number&nbsp;of&nbsp;tickets&nbsp;to&nbsp;be&nbsp;reached&nbsp;as&nbsp;part<br/>of&nbsp;a&nbsp;race&nbsp;condition.&nbsp;Finally,&nbsp;F&nbsp;is&nbsp;correct&nbsp;because&nbsp;the&nbsp;class&nbsp;synchronizes&nbsp;using&nbsp;a&nbsp;static<br/>getInstance()&nbsp;method,&nbsp;preventing&nbsp;more&nbsp;than&nbsp;one&nbsp;instance&nbsp;from&nbsp;being&nbsp;created.$7
